{"version":3,"sources":["components/TodoList.js","components/CountContainer.js","components/TodoInput.js","App.js","index.js"],"names":["TodoList","list","complete","deleted","editing","input","changeInput","enterToUpdate","className","type","id","map","item","key","isCompleted","onEdit","onClick","onDoubleClick","text","placeholder","value","onChange","onKeyUp","event","CountContainer","calculateSum","count","href","TodoInput","change","enterToAdd","autoFocus","App","useState","setInput","edit","setEdit","items","setItems","setType","nextId","setNextId","setCount","target","trim","newTodo","concat","filter","updatedItems","updateItem","updatedItem","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d307b21.chunk.js","sourcesContent":["import React from 'react';\n\nfunction TodoList({ list, complete, deleted, editing, input, changeInput, enterToUpdate }) {\n  return (\n    <div className=\"main\">\n      <input className=\"toggle-all\" type=\"checkbox\"/>\n      <ul id=\"todo-list\" className=\"todo-list\"> {list.map(item => (\n        <li key={item.id}\n            className={item.isCompleted ? \"completed\" : item.onEdit ? \"editing\" : \"ready\"}>\n          <div className=\"view\">\n            <input className=\"toggle\" type=\"checkbox\" onClick={() => complete(item.id)}/>\n            <label className=\"label\" onDoubleClick={() => editing(item.id)}>{item.text}</label>\n            <button className=\"destroy\" onClick={() => deleted(item.id)}></button>\n          </div>\n          <input\n            className=\"edit\"\n            placeholder={item.text}\n            value={input}\n            onChange={changeInput}\n            onKeyUp={(event) => enterToUpdate(event, item.id)}\n          />\n        </li>\n      ))} </ul>\n    </div>\n  );\n}\n\nexport default TodoList;","import React from 'react';\n\nfunction CountContainer({ calculateSum, count }) {\n  return (\n    <div className=\"count-container\">\n      <span className=\"todo-count\">총 <strong>{count}</strong> 개</span>\n      <ul className=\"filters\">\n        <li>\n          <a className=\"all selected\" href=\"#/\" onClick={() => calculateSum(\"ALL\")}>전체보기</a>\n        </li>\n        <li>\n          <a className=\"active\"  href=\"#/active\" onClick={()=> calculateSum(\"ACTIVE\")}>해야할 일</a>\n        </li>\n        <li>\n          <a className=\"completed\" href=\"#/completed\" onClick={() => calculateSum(\"COMPLETE\")}>완료한 일</a>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nexport default CountContainer;","import React from 'react';\n\nfunction TodoInput({ input, change, enterToAdd }) {\n  return (\n    <div>\n      <h1>TODOS</h1>\n      <input id=\"new-todo-title\" className=\"new-todo\" placeholder=\"할일을 추가해주세요\" autoFocus\n             value={input}\n             onChange={change}\n             onKeyUp={enterToAdd}\n      />\n    </div>\n  );\n}\n\nexport default TodoInput;","import React, { useState } from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\nimport CountContainer from './components/CountContainer';\nimport TodoInput from './components/TodoInput';\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [edit, setEdit] = useState(\"\");\n  const [items, setItems] = useState([\n    { id: 1, text: \"안녕하세요\", isCompleted: false, onEdit: false },\n    { id: 2, text: \"글을 작성해주세요.\", isCompleted: false, onEdit: false }\n  ]);\n  const [type, setType] = useState(\"ALL\");\n  const [nextId, setNextId] = useState(3);\n  const [count, setCount] = useState(2);\n\n  const changeInput = (event) => {\n    setInput(event.target.value);\n  }\n\n  const changeEditInput = (event) => {\n    setEdit(event.target.value);\n  }\n\n  const deleteTodo = (id) => {\n    setItems(items.filter(item => item.id !== id));\n    setCount(count - 1);\n  }\n\n  const enterToAdd = (event) => {\n    if (event.key === 'Enter' && event.target.value.trim() !== \"\") {\n      const newTodo = {\n        id: nextId,\n        text: input,\n        isCompleted: false,\n        onEdit: false\n      };\n      setNextId(nextId + 1);\n      setCount(count + 1);\n      setInput(\"\");\n      setItems(items.concat(newTodo))\n    }\n  }\n\n  const enterToUpdate = (event, id) => {\n    if (event.key === 'Escape') {\n      const updatedItem = items.map(item => item.id === id ?\n        item = {\n          id: id,\n          text: item.text,\n          isCompleted: false,\n          onEdit: false\n        } : item);\n      setItems(updatedItem);\n    }\n    if (event.key === 'Enter' && event.target.value.trim() !== \"\") {\n      const updatedItem = items.map(item => item.id === id ? (\n        item = {\n          id: id,\n          text: edit,\n          isCompleted: false,\n          onEdit: false\n        }\n      ) : item);\n      setItems(updatedItem);\n    }\n  }\n\n  const activeCount = () => {\n    return items.filter(item => !item.isCompleted).length;\n  }\n\n  const completedCount = () => {\n    return items.filter(item => item.isCompleted).length;\n  }\n\n  const calculateSum = (filter) => {\n    if (filter === \"ALL\") {\n      setCount(items.length);\n      setType(\"ALL\");\n      return\n    }\n    return (filter === \"ACTIVE\" ? (setCount(activeCount()), setType(\"ACTIVE\")) : (setCount(completedCount()), setType(\"COMPLETED\")));\n  }\n\n  const editing = (id) => {\n    const updateItem = items.map(item => item.id === id ? { ...item, onEdit: !item.onEdit } : item);\n    setItems(updateItem);\n  }\n\n  const checkComplete = (id) => {\n    const updatedItems = items.map(item => item.id === id ? {\n      ...item,\n      isCompleted: !item.isCompleted\n    } : item);\n    setItems(updatedItems);\n  }\n\n  const filter = (type) => {\n    if(type === \"ALL\") {\n      return items;\n    } else if (type === \"ACTIVE\") {\n      return items.filter(item => !item.isCompleted);\n    } else if (type === \"COMPLETED\") {\n      return items.filter(item => item.isCompleted);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <section className=\"todoapp\">\n        <TodoInput input={input} change={changeInput} enterToAdd={enterToAdd}/>\n        <TodoList\n          list={filter(type)}\n          complete={checkComplete}\n          deleted={deleteTodo}\n          editing={editing}\n          input={edit}\n          changeInput={changeEditInput}\n          enterToUpdate={enterToUpdate}\n        />\n        <CountContainer calculateSum={calculateSum} count={count}/>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}